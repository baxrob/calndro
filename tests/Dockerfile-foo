
#docker build -t caldor-sched .
#docker rm <the-container-id>
# docker volume create caldor-dev
# docker run -dp 8000:8001 -v caldor-dev:/code caldor-sched
#docker volume inspect caldor-dev
#
#docker run -dp 3000:3000 \
#    -w /app -v "$(pwd):/app" \
#    node:12-alpine \
#    sh -c "yarn install && yarn run dev"
#
## syntax=docker/dockerfile:1
#FROM node:12-alpine
#RUN apk add --no-cache python2 g++ make
#WORKDIR /app
#COPY . .
#RUN yarn install --production
#CMD ["node", "src/index.js"]

# syntax=docker/dockerfile:1
FROM python:3
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
WORKDIR /code
COPY requirements.txt /code/
# X: layer rebuilt if files changed
#COPY . /code/
RUN pip install --upgrade pip && pip install -r requirements.txt
COPY . /code/
#RUN pip install -r requirements.txt && pip install --upgrade pip && sh reset.sh
#ENV ENV_PATH=/code/config/.env.docker
ENV DATABASE_URL=sqlite:////code/db.sqlite3
RUN set -ex && ls -ltrhA && ./manage.py check && whoami && ./reset.sh
#RUN set -ex; sh reset.sh
EXPOSE 8000
CMD ["./manage.py", "runserver", "0.0.0.0:8000"]
#CMD ["sh"]

##__
#
## Dockerfile
#
## The first instruction is what image we want to base our container on
## We Use an official Python runtime as a parent image
#FROM python:3.7
#
## Allows docker to cache installed dependencies between builds
#COPY requirements.txt requirements.txt
#RUN pip install --no-cache-dir -r requirements.txt
#
## Mounts the application code to the image
#COPY . code
#WORKDIR /code
#
#EXPOSE 8000
#
## runs the production server
#ENTRYPOINT ["python", "mysite/manage.py"]
#CMD ["runserver", "0.0.0.0:8000"]
#
##__
#
## pull the official base image
#FROM python:3.8.3-alpine
#
## set work directory
#WORKDIR /usr/src/app
#
## set environment variables
#ENV PYTHONDONTWRITEBYTECODE 1
#ENV PYTHONUNBUFFERED 1
#
## install dependencies
#RUN pip install --upgrade pip
#COPY ./requirements.txt /usr/src/app
#RUN pip install -r requirements.txt
#
## copy project
#COPY . /usr/src/app
#
#EXPOSE 8000
#
#CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
#
##__
#
##Tells Docker to use the official python 3 image from dockerhub as a base image
#FROM python:3
## Sets an environmental variable that ensures output from python is sent straight to the terminal without buffering it first
#ENV PYTHONUNBUFFERED 1
## Sets the container's working directory to /app
#WORKDIR /app
## Copies all files from our local project into the container
#ADD ./app
## runs the pip install command for all packages listed in the requirements.txt file
#RUN pip install -r requirements.txt
#
#
##__
##https://www.digitalocean.com/community/tutorials/how-to-build-a-django-and-gunicorn-application-with-docker
#FROM python:3.7.4-alpine3.10
#ADD django-polls/requirements.txt /app/requirements.txt
#
#RUN set -ex \
#    && apk add --no-cache --virtual .build-deps postgresql-dev build-base \
#    && python -m venv /env \
#    && /env/bin/pip install --upgrade pip \
#    && /env/bin/pip install --no-cache-dir -r /app/requirements.txt \
#    && runDeps="$(scanelf --needed --nobanner --recursive /env \
#        | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
#        | sort -u \
#        | xargs -r apk info --installed \
#        | sort -u)" \
#    && apk add --virtual rundeps $runDeps \
#    && apk del .build-deps
#
#ADD django-polls /app
#WORKDIR /app
#
#ENV VIRTUAL_ENV /env
#ENV PATH /env/bin:$PATH
#
#EXPOSE 8000
#
#CMD ["gunicorn", "--bind", ":8000", "--workers", "3", "mysite.wsgi:application"]


